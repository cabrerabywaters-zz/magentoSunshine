<?php 
class Magestore_Affiliateplus_Model_Total_Address_Affiliateplus extends Mage_Sales_Model_Quote_Address_Total_Abstract {
	public function __construct() {
        $this->setCode('affiliateplus');
    }
	
	/**
     * get Config Helper
     *
     * @return Magestore_Affiliateplus_Helper_Config
     */
    protected function _getConfigHelper() {
        return Mage::helper('affiliateplus/config');
    }
	
	public function collect(Mage_Sales_Model_Quote_Address $address) {
		// Changed By Adam 28/07/2014
        if (!Mage::helper('affiliateplus')->isAffiliateModuleEnabled())
            return $this;
		
        /* hainh add discount calculate with incl or excl tax variable 22-04-2014*/
        $discount_include_tax = false;
        if ((int) (Mage::getStoreConfig('tax/calculation/discount_tax', $address->getQuote()->getStore())) == 1)
            $discount_include_tax = true;
        Mage::helper('affiliateplus/cookie')->getNumberOrdered();
        if ($this->_getConfigHelper()->getDiscountConfig('type_discount') == 'product') {
            return $this;
        }
        if ($this->_getConfigHelper()->getDiscountConfig('allow_discount') == 'system') {
            $appliedRuleIds = array();
            if (is_string($address->getAppliedRuleIds())) {
                $appliedRuleIds = explode(',', $address->getAppliedRuleIds());
                $appliedRuleIds = array_filter($appliedRuleIds);
            }
            if (count($appliedRuleIds)) {
                return $this;
            }
        }
        $items = $address->getAllItems();
        if (!count($items))
            return $this;
		
		/* edit by Jack - get all information from order editing */
        $session = Mage::getSingleton('checkout/session');
        $orderId = Mage::getSingleton('adminhtml/session_quote')->getOrder()->getId();
        /* get data processed */
        $dataProcessing = Mage::helper('affiliateplus')->processDataWhenEditOrder();
        if (isset($dataProcessing['current_couponcode']))
            $currentCouponCode = $dataProcessing['current_couponcode'];
        if (isset($dataProcessing['base_affiliate_discount']))
            $baseAffiliateDiscount = $dataProcessing['base_affiliate_discount'];
        if (isset($dataProcessing['customer_id']))
            $customerId = $dataProcessing['customer_id'];
        if (isset($dataProcessing['default_discount']))
            $defaultDiscount = $dataProcessing['default_discount'];
        /* */
        $couponCodeBySession = $session->getAffiliateCouponCode();
        $isAllowUseCoupon = Mage::helper('affiliateplus')->isAllowUseCoupon($couponCodeBySession);
        if (!$isAllowUseCoupon || !Mage::helper('affiliateplus')->isAffiliateModuleEnabled())
            $session->unsAffiliateCouponCode();
        $isEnableLiftime = Mage::getStoreConfig('affiliateplus/commission/life_time_sales');
        if (Mage::helper('affiliateplus/cookie')->getNumberOrdered() == 1 && !$session->getData('affiliate_coupon_code') && isset($currentCouponCode) && $currentCouponCode != '') {
            return $this;
        } else if ($isEnableLiftime == 0 && Mage::helper('affiliateplus/cookie')->getNumberOrdered() > 1 && !$session->getData('affiliate_coupon_code') && isset($currentCouponCode) && $currentCouponCode != '') {
            return $this;
        }

        $baseDiscount = 0;
        $affiliateInfo = Mage::helper('affiliateplus/cookie')->getAffiliateInfo();
        $discountObj = new Varien_Object(array(
            'affiliate_info' => $affiliateInfo,
            'base_discount' => $baseDiscount,
            'default_discount' => true,
			'discounted_products' => array(),
            'discounted_items' => array(),
			'program' => '',
        ));
        if (!isset($customerId))
            $customerId = '';
        /* add new event to calculate commission when edit order - Edit By Jack */
        if (Mage::helper('affiliateplus')->isAdmin()) {
            Mage::dispatchEvent('affiliateplus_address_collect_total_edit', array(
                'address' => $address,
                'discount_obj' => $discountObj,
            ));
        }
        /* end add new event  */ else {
            Mage::dispatchEvent('affiliateplus_address_collect_total', array(
                'address' => $address,
                'discount_obj' => $discountObj,
            ));
        }
		
		if (((isset($defaultDiscount) && $defaultDiscount && !$couponCodeBySession && Mage::helper('affiliateplus')->isAdmin() )) || (isset($dataProcessing['program_name']) && $dataProcessing['program_name'] == 'Affiliate Program' && Mage::helper('affiliateplus')->isAdmin()) || ($discountObj->getProgram() == 'Affiliate Program') || ($account && $account->getId()) || (isset($baseAffiliateDiscount) && $baseAffiliateDiscount)) {
			$currentStoreId = Mage::getSingleton('adminhtml/session_quote')->getStoreId();
			if (!$currentStoreId)
				$currentStoreId = null;
			$account = '';
            foreach ($affiliateInfo as $info)
                if (isset($info['account']) && $info['account'])
                    $account = $info['account'];
            if ($account && $account->getId()) {
				
				$discountType = $this->_getConfigHelper()->getDiscountConfig('discount_type', $currentStoreId);
				$discountValue = floatval($this->_getConfigHelper()->getDiscountConfig('discount', $currentStoreId));
				if (($orderId && Mage::helper('affiliateplus/cookie')->getNumberOrdered() > 1) || (!$orderId && Mage::helper('affiliateplus/cookie')->getNumberOrdered())) {
					if ($this->_getConfigHelper()->getDiscountConfig('use_secondary', $currentStoreId)) {
						$discountType = $this->_getConfigHelper()->getDiscountConfig('secondary_type', $currentStoreId);
						$discountValue = floatval($this->_getConfigHelper()->getDiscountConfig('secondary_discount', $currentStoreId));
					}
				}
				$discountedItems = $discountObj->getDiscountedItems();
				$discountedProducts = $discountObj->getDiscountedProducts();
				
				$baseDiscount = $discountObj->getBaseDiscount();
        
                if ($discountValue <= 0) {
                    /* hainh update adding below line for returning while there's no discount - 
                     * ticket KAP-960-42962 21-04-2014 */
                    //return $this;
                    //do nothing if discount value <=0
                } elseif ($discountType == 'cart_fixed') {
                    $baseItemsPrice = 0;
                    foreach ($items as $item) {
                        if ($item->getParentItemId()) {
                            continue;
                        }
                        if (in_array($item->getId(), $discountedItems)) {
                            continue;
                        }
                        if ($item->getHasChildren() && $item->isChildrenCalculated()) {
                            foreach ($item->getChildren() as $child) {
                                $baseItemsPrice += $item->getQty() * ($child->getQty() * $child->getBasePrice() - $child->getBaseDiscountAmount());
                            }
                        } elseif ($item->getProduct()) {
                            $baseItemsPrice += $item->getQty() * $item->getBasePrice() - $item->getBaseDiscountAmount();
                        }
                    }
                    if ($baseItemsPrice) {
                        $totalBaseDiscount = min($discountValue, $baseItemsPrice);
                        foreach ($items as $item) {
                            if ($item->getParentItemId()) {
                                continue;
                            }
                            if (in_array($item->getId(), $discountedItems)) {
                                continue;
                            }
                            if ($item->getHasChildren() && $item->isChildrenCalculated()) {
                                foreach ($item->getChildren() as $child) {
                                    $price = $item->getQty() * ($child->getQty() * $child->getBasePrice() - $child->getBaseDiscountAmount());
                                    $childBaseDiscount = $totalBaseDiscount * $price / $baseItemsPrice;
                                    $child->setBaseAffiliateplusAmount($childBaseDiscount)
                                            ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($childBaseDiscount));
                                }
                            } elseif ($item->getProduct()) {
                                $price = $item->getQty() * $item->getBasePrice() - $item->getBaseDiscountAmount();
                                $itemBaseDiscount = $totalBaseDiscount * $price / $baseItemsPrice;
                                $item->setBaseAffiliateplusAmount($itemBaseDiscount)
                                        ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($itemBaseDiscount));
                            }
                        }
                        $baseDiscount += $totalBaseDiscount;
                    }
                } elseif ($discountType == 'fixed') {
                    foreach ($items as $item) {
                        if ($item->getParentItemId()) {
                            continue;
                        }
                        if (in_array($item->getId(), $discountedItems)) {
                            continue;
                        }
                        $itemBaseDiscount = 0;

                        if ($item->getHasChildren() && $item->isChildrenCalculated()) {
                            foreach ($item->getChildren() as $child) {
                                $childBaseDiscount = $item->getQty() * $child->getQty() * $discountValue;
                                $price = $item->getQty() * ( $child->getQty() * $child->getBasePrice() - $child->getBaseDiscountAmount() );
                                $childBaseDiscount = ($childBaseDiscount < $price) ? $childBaseDiscount : $price;
                                $itemBaseDiscount += $childBaseDiscount;
                                $child->setBaseAffiliateplusAmount($childBaseDiscount)
                                        ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($childBaseDiscount));
                            }
                        } elseif ($item->getProduct()) {
                            $itemBaseDiscount = $item->getQty() * $discountValue;
                            $price = $item->getQty() * $item->getBasePrice() - $item->getBaseDiscountAmount();
                            $itemBaseDiscount = ($itemBaseDiscount < $price) ? $itemBaseDiscount : $price;
                            $item->setBaseAffiliateplusAmount($itemBaseDiscount)
                                    ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($itemBaseDiscount));
                        }
                        $baseDiscount += $itemBaseDiscount;
                    }
                } elseif ($discountType == 'percentage') {
                    if ($discountValue > 100)
                        $discountValue = 100;
                    if ($discountValue < 0)
                        $discountValue = 0;
                    foreach ($items as $item) {
                        if ($item->getParentItemId()) {
                            continue;
                        }
                        if (in_array($item->getId(), $discountedItems)) {
                            continue;
                        }
                        if ($item->getHasChildren() && $item->isChildrenCalculated()) {
                            foreach ($item->getChildren() as $child) {
                                /* hainh add this for calculating discount base on incl or excl tax price 22-04-2014 */
                                if (!$discount_include_tax)
                                    $price = $item->getQty() * ( $child->getQty() * $child->getBasePrice() - $child->getBaseDiscountAmount() );
                                else
                                    $price = $item->getQty() * ( $child->getQty() * $child->getBasePriceInclTax() - $child->getBaseDiscountAmount() );

                                $childBaseDiscount = $price * $discountValue / 100;
                                $itemBaseDiscount += $childBaseDiscount;
                                $child->setBaseAffiliateplusAmount($childBaseDiscount)
                                        ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($childBaseDiscount));
                            }
                        } elseif ($item->getProduct()) {
                            /* hainh add this for calculating discount base on incl or excl tax price 22-04-2014 */
                            if (!$discount_include_tax)
                                $price = $item->getQty() * $item->getBasePrice() - $item->getBaseDiscountAmount();
                            else
                                $price = $item->getQty() * $item->getBasePriceInclTax() - $item->getBaseDiscountAmount();


                            $itemBaseDiscount = $price * $discountValue / 100;
                            $item->setBaseAffiliateplusAmount($itemBaseDiscount)
                                    ->setAffiliateplusAmount(Mage::app()->getStore()->convertPrice($itemBaseDiscount));
                        }
                        $baseDiscount += $itemBaseDiscount;
                    }
                }
            }
        }

        // if ($baseDiscount > $address->getBaseGrandTotal())
        //     $baseDiscount = $address->getBaseGrandTotal();

        if ($baseDiscount) {
            $discount = Mage::app()->getStore()->convertPrice($baseDiscount);
            $address->setBaseAffiliateplusDiscount(-$baseDiscount);
            $address->setAffiliateplusDiscount(-$discount);

            $session = Mage::getSingleton('checkout/session');
            if ($session->getData('affiliate_coupon_code')) {
                $address->setAffiliateplusCoupon($session->getData('affiliate_coupon_code'));
            }

            $address->setBaseGrandTotal($address->getBaseGrandTotal() - $baseDiscount);
            $address->setGrandTotal($address->getGrandTotal() - $discount);
        }

        return $this;
    }

    public function fetch(Mage_Sales_Model_Quote_Address $address) {
        // $amount = $address->getAffiliateplusDiscount();
        // $title = $this->_getConfigHelper()->__('Affiliate Discount');
        // if ($amount != 0) {
            // if ($address->getAffiliateplusCoupon()) {
                // $title .= ' (' . $address->getAffiliateplusCoupon() . ')';
            // }
            // $address->addTotal(array(
                // 'code' => $this->getCode(),
                // 'title' => $title,
                // 'value' => $amount,
            // ));
        // }
        // return $this;
		
		$session = Mage::getSingleton('checkout/session');
        $orderId = Mage::getSingleton('adminhtml/session_quote')->getOrder()->getId();
        if (!$orderId)
            $orderId = '';
        //show affiliate discount edit by Jack
        if (isset($orderId) && Mage::helper('affiliateplus')->isAdmin()) {
            Mage::helper('affiliateplus')->showAffiliateDiscount($orderId);
        }
        $amount = $address->getAffiliateplusDiscount();
        $title = $this->_getConfigHelper()->__('Affiliate Discount');
        if ($amount != 0) {
            if ($address->getAffiliateplusCoupon()) {
                $title .= ' (' . $address->getAffiliateplusCoupon() . ')';
            }
            /* show coupon code when edit Order - Edit By Jack */ else if ($session->getData('affiliate_coupon_code')) {
                $title .= ' (' . $session->getData('affiliate_coupon_code') . ')';
            }
            /* end show coupon code   */
            $address->addTotal(array(
                'code' => $this->getCode(),
                'title' => $title,
                'value' => $amount,
            ));
        }
        return $this;
    }
}